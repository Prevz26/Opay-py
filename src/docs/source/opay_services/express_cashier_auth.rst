 ```rst
Authentication for Opay_Cashier
=============================

The ``auth`` method in the ``Opay_Cashier`` class is designed to securely handle authentication for accessing Opay services. This method ensures that only the required credentials are passed and provides mechanisms for generating or validating headers automatically.

Overview
--------

To interact with Opay's Cashier services, authentication is required to verify each request. For this service in particular, the authentication requires:

- A public key for identifying the client.
- A merchant ID associated with the specific account.

This authentication data can either be passed directly to the ``auth`` method or automatically generated if not provided.

Supported Authentication Methods
-------------------------------

1. **Manual Credentials**: Pass ``public_key`` and ``merchant_id`` as keyword arguments when calling the ``auth`` method.

2. **Automatic Signature Generation**: If ``public_key`` and ``merchant_id`` are not provided, the ``auth`` method will attempt to generate these headers using a helper function ``helpers.public_key_signature()``.

Using the ``auth`` Method
------------------------

The ``auth`` method can be used in two ways: either by explicitly passing the required keys or by allowing the function to generate them.

Method 1: Manually Passing ``public_key`` and ``merchant_id``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you already have the ``public_key`` and ``merchant_id``, pass them directly as keyword arguments when calling ``auth``. This ensures that your credentials are immediately available and that they match what's expected by Opay's Cashier services.

.. code-block:: python

    # Instantiate Opay_Cashier with environment (sandbox or production)
    cashier = Opay_Cashier(environment="sandbox")

    # Manually provide public_key and merchant_id in the request
    headers = cashier.auth(public_key="your_public_key", merchant_id="your_merchant_id")

Parameters:

- ``public_key`` (str): Your Opay public key.
- ``merchant_id`` (str): The merchant ID tied to your account.

Returns: A dictionary containing the necessary headers for authorization:

.. code-block:: python

    {
        "Authorization": "your_public_key",
        "Merchant-Id": "your_merchant_id"
    }

Method 2: Automatic Signature Generation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If ``public_key`` and ``merchant_id`` are not provided, ``auth`` will automatically call the ``helpers.public_key_signature()`` function to generate the required headers. This can be useful for simplifying authentication if your setup already handles key generation.

.. code-block:: python

    # Instantiate Opay_Cashier with environment (sandbox or production)
    cashier = Opay_Cashier(environment="sandbox")

    # Automatic header generation
    headers = cashier.auth()

This method will raise an error if the generated headers do not contain both "Authorization" (public key) and "Merchant-Id" values, ensuring that all requests have the required credentials.

Example Usage of Opay_Cashier with ``auth``
------------------------------------------

Below is a complete example of how to instantiate the ``Opay_Cashier`` class and make a request with authentication headers:

.. code-block:: python

    # Initialize Opay_Cashier
    cashier = Opay_Cashier(environment="sandbox")

    # Prepare a request payload
    payload = {
        "amount": 1000,
        "currency": "NGN"
    }

    # Manually set authentication headers
    cashier.auth(public_key="your_public_key", merchant_id="your_merchant_id")

    # Make the request
    response = cashier.request(payload=payload)

    print(response)

Or, with automatic header generation:

.. code-block:: python

    # Initialize Opay_Cashier
    cashier = Opay_Cashier(environment="sandbox")

    # Make a request with auto-generated headers
    response = cashier.request(payload={"amount": 1000, "currency": "NGN"})

    print(response)

Error Handling and Troubleshooting
----------------------------------

The ``auth`` method is designed to enforce security and reliability. Below are some common errors and troubleshooting tips:

1. **Missing Credentials**: If ``public_key`` and ``merchant_id`` are not passed as kwargs and the ``helpers.public_key_signature()`` function fails to generate them, the method will raise a ``ValueError`` with the message:

   "Authentication failed: Required 'public_key' and 'merchant_id' are missing."

   **Solution**: Ensure both ``public_key`` and ``merchant_id`` are either provided manually or configured to be generated by ``helpers.public_key_signature()``.

2. **Invalid Environment**: If an invalid environment (neither "sandbox" nor "production") is provided, the ``__init__`` method will raise a ``ValueError``:

   "Invalid Environment: Environment should be 'sandbox' or 'production'"

   **Solution**: Confirm that the environment is correctly set to either "sandbox" or "production" when instantiating the ``Opay_Cashier`` class.

3. **Request Errors**: In case of network or API errors during a request, the ``request`` method will catch the exception and print a message:

   "Request failed: [error details]"

   **Solution**: Check the error details for issues such as network connectivity, endpoint availability, or invalid payload data.

Summary
-------

The ``auth`` method is flexible, supporting both manual and automatic header generation while ensuring required credentials are always present. By following the examples and troubleshooting tips, you can securely authenticate and interact with Opay Cashier services using the ``Opay_Cashier`` client library.
```

three methods for auth
directly passing the keys in the Opay cashier class as a dictionary
using the auth method from this class
having your keys in the .env and have the class automatically get the keys 